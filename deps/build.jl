# Build script by MosÃ¨ Giordano
# https://github.com/giordano/GSLBuilder.jl

using BinaryProvider # requires BinaryProvider 0.3.0 or later
using Compat

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    # work around for https://github.com/JuliaPackaging/BinaryProvider.jl/issues/133
    LibraryProduct(prefix, [Compat.Sys.iswindows() ? "libgsl" : "libgsl."], :libgsl),
    LibraryProduct(prefix, [Compat.Sys.iswindows() ? "libgslcblas" : "libgslcblas."], :libgslcblas),    
]

# Download binaries from hosted location
bin_prefix = "https://github.com/giordano/GSLBuilder.jl/releases/download/v2.5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GSL.v2.5.0.aarch64-linux-gnu.tar.gz", "2ef8068b9c4d5b9176ae9e26b7ccd609a11e2af90fc8cdbd15e2d03337d8f6da"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GSL.v2.5.0.aarch64-linux-musl.tar.gz", "6bdfe541090db4f9595f2fc738df51f698adc7815194b56e57dfb5f264da2412"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GSL.v2.5.0.arm-linux-gnueabihf.tar.gz", "8ab790dc61a12eb02517506be6c4eb76c8c2f6d063579d23bf319b3bbdf3ce33"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GSL.v2.5.0.arm-linux-musleabihf.tar.gz", "087cea8503132c86072ad8bf937b20878c90382dc3cc0e7a019d6d30a898486c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GSL.v2.5.0.i686-linux-gnu.tar.gz", "bfbdf22fd86e6215ceb32522d5f5bc1a9c222e7ac5561bb098f15b4b0a385990"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GSL.v2.5.0.i686-linux-musl.tar.gz", "89b6d9c413bd1eab1970e07bb3e80d65fae54dc1c430a0542dd012bdc007f6db"),
    Windows(:i686) => ("$bin_prefix/GSL.v2.5.0.i686-w64-mingw32.tar.gz", "65a3c637f1c92a3f6f1d19154e9cf3072ea27d6a2599d21f9ee4a37d42b47578"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GSL.v2.5.0.powerpc64le-linux-gnu.tar.gz", "848f8177b7ba88c31e504ba6a4032509a05bf6c1951919faa6f3aa1832a41494"),
    MacOS(:x86_64) => ("$bin_prefix/GSL.v2.5.0.x86_64-apple-darwin14.tar.gz", "ec5f7f98376f449567e1f00658263aea8e0221284c8649dc9e89130f9005d258"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GSL.v2.5.0.x86_64-linux-gnu.tar.gz", "74db5d2620894d2ec7ebb5725f41ff4a88aa6e99df6c5a6077ee135eb1c20fac"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GSL.v2.5.0.x86_64-linux-musl.tar.gz", "69f48ac74989e843ce6b3842e99b3075e01232143a8e60c36cf1aa1a6e659c29"),
    FreeBSD(:x86_64) => ("$bin_prefix/GSL.v2.5.0.x86_64-unknown-freebsd11.1.tar.gz", "8ca4a69b8894c0c1a10268e88e07ed194ec3776d0b17005b9ef811b0a92cd603"),
    Windows(:x86_64) => ("$bin_prefix/GSL.v2.5.0.x86_64-w64-mingw32.tar.gz", "62aac95312170c207e609be4f1a80cfe7cf39d723e919630a31cebc97581a977"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
